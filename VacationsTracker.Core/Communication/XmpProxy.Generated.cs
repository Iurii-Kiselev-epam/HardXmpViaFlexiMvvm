//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace VacationsTracker.Core.Communication
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IXmpProxy
    {
        /// <summary>Gets Vacation Requests list</summary>
        /// <returns>Success list GET result</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResultOfVacationRequestOf> VtsVacationGetListAsync();
    
        /// <summary>Gets Vacation Requests list</summary>
        /// <returns>Success list GET result</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BaseResultOfVacationRequestOf> VtsVacationGetListAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates or Updates specific Vacation Request by id</summary>
        /// <param name="req">Vacation request to create (id is an empty guid) or update (id is not an empty guid)</param>
        /// <returns>Item create or update POST operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationUpsertAsync(VacationRequest req);
    
        /// <summary>Creates or Updates specific Vacation Request by id</summary>
        /// <param name="req">Vacation request to create (id is an empty guid) or update (id is not an empty guid)</param>
        /// <returns>Item create or update POST operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationUpsertAsync(VacationRequest req, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item GET operation result. Check Code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationGetByIdAsync(string id);
    
        /// <summary>Gets specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item GET operation result. Check Code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationGetByIdAsync(string id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item DELETE operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResult> VtsVacationDeleteAsync(string id);
    
        /// <summary>Deletes specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item DELETE operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BaseResult> VtsVacationDeleteAsync(string id, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class XmpProxy : IXmpProxy
    {
        private string _baseUrl = "http://localhost:5000";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public XmpProxy(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Gets Vacation Requests list</summary>
        /// <returns>Success list GET result</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BaseResultOfVacationRequestOf> VtsVacationGetListAsync()
        {
            return VtsVacationGetListAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets Vacation Requests list</summary>
        /// <returns>Success list GET result</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BaseResultOfVacationRequestOf> VtsVacationGetListAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/vts/workflow");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BaseResultOfVacationRequestOf); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfVacationRequestOf>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new CommunicationException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new CommunicationException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BaseResultOfVacationRequestOf);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates or Updates specific Vacation Request by id</summary>
        /// <param name="req">Vacation request to create (id is an empty guid) or update (id is not an empty guid)</param>
        /// <returns>Item create or update POST operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationUpsertAsync(VacationRequest req)
        {
            return VtsVacationUpsertAsync(req, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Creates or Updates specific Vacation Request by id</summary>
        /// <param name="req">Vacation request to create (id is an empty guid) or update (id is not an empty guid)</param>
        /// <returns>Item create or update POST operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationUpsertAsync(VacationRequest req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/vts/workflow");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BaseResultOfVacationRequest); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfVacationRequest>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new CommunicationException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new CommunicationException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BaseResultOfVacationRequest);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item GET operation result. Check Code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationGetByIdAsync(string id)
        {
            return VtsVacationGetByIdAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Gets specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item GET operation result. Check Code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BaseResultOfVacationRequest> VtsVacationGetByIdAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/vts/workflow/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BaseResultOfVacationRequest); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfVacationRequest>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new CommunicationException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new CommunicationException("Cannot use parameter provided. Use RFC-4122 UUID (GUID) like ac20862e-d829-4798-adca-c474a6eff465", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new CommunicationException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BaseResultOfVacationRequest);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item DELETE operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BaseResult> VtsVacationDeleteAsync(string id)
        {
            return VtsVacationDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Deletes specific Vacation Request by id</summary>
        /// <param name="id">Vacation request id (in the form "7d444840-9dc0-11d1-b245-5ffdce74fad2")</param>
        /// <returns>Item DELETE operation result. Check code for success status</returns>
        /// <exception cref="CommunicationException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BaseResult> VtsVacationDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/vts/workflow/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BaseResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new CommunicationException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new CommunicationException("Cannot use parameter provided. Use RFC-4122 UUID (GUID) like ac20862e-d829-4798-adca-c474a6eff465", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new CommunicationException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BaseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>Operation result container</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResult 
    {
        /// <summary>Gets or sets the result code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseResultCode Code { get; set; }
    
        /// <summary>Gets or sets the message.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfVacationRequestOf : BaseResult
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VacationRequest> Result { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfVacationRequestOf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfVacationRequestOf>(data);
        }
    
    }
    
    /// <summary>Vacation request item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VacationRequest 
    {
        /// <summary>Gets or sets the identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid Id { get; set; }
    
        /// <summary>Gets or sets the Vacation start date/time.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Start { get; set; }
    
        /// <summary>Gets or sets the Vacation end date/time.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime End { get; set; }
    
        /// <summary>Gets or sets the Vacation type</summary>
        [Newtonsoft.Json.JsonProperty("vacationType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VacationType VacationType { get; set; }
    
        /// <summary>Gets or sets the Vacation status</summary>
        [Newtonsoft.Json.JsonProperty("vacationStatus", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VacationStatus VacationStatus { get; set; }
    
        /// <summary>Gets or sets the user's id who has created this Vacation</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        /// <summary>Gets or sets the Vacation created date/time.</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VacationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VacationRequest>(data);
        }
    
    }
    
    /// <summary>Vacation type accoring to the policy</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VacationType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
    
        Undefined = 0,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Regular")]
    
        Regular = 1,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Sick")]
    
        Sick = 2,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Exceptional")]
    
        Exceptional = 3,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "LeaveWithoutPay")]
    
        LeaveWithoutPay = 4,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Overtime")]
    
        Overtime = 5,
    
    
    }
    
    /// <summary>Vacation workflow status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VacationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
    
        Draft = 0,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Submitted")]
    
        Submitted = 1,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Approved")]
    
        Approved = 2,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
    
        InProgress = 3,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "Closed")]
    
        Closed = 4,
    
    
    }
    
    /// <summary>Base result code.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BaseResultCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "OK")]
    
        OK = 0,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "ValidationFailed")]
    
        ValidationFailed = 1,
    
    
        [System.Runtime.Serialization.EnumMember(Value = "NotFound")]
    
        NotFound = 2,
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.58.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseResultOfVacationRequest : BaseResult
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VacationRequest Result { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfVacationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfVacationRequest>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CommunicationException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public CommunicationException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CommunicationException<TResult> : CommunicationException
    {
        public TResult Result { get; private set; }

        public CommunicationException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}